  

# 자산 검증 파일 파일 실행(Git bash에서 처리)  ■■■■■■   ■■■■■■   ■■■■■■  ■■■■■■   ■■■■■■   ■■■■■■  --> TEST
01. 디버깅 시작(F5) ■■■■■■ ==> 실행(R) > 디버깅 시작
02. 디버깅 없이 실행(Ctrl + F5) ■■■■■■ ==> 실행(R) > 디버깅 시작


TAMA_HAart_404@TAMA-HAart-404 MINGW64 /d/PythonWorkspace (main)
$ cd /d/PythonWorkspace

TAMA_HAart_404@TAMA-HAart-404 MINGW64 /d/PythonWorkspace (main) 
$ python /D/PythonWorkspace/01_ast_vrfc/ast_vrfc.py
---------------------------------------------------------------------------


$ python /D/PythonWorkspace/01_ast_vrfc/ast_vrfc_23.09.py

$ python /D/PythonWorkspace/01_ast_vrfc/ast_vrfc_23.11.py
---------------------------------------------------------------------------

$ clear
$ python /D/PythonWorkspace/rpa_basic/1_excel/2_sheet.py 
$ python /D/PythonWorkspace/rpa_basic/1_excel/11_cell_style.py 
=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■



-- TEST @@@@
# urlPath = ""   # 01. URL 경로(폴더)   # ■■■■■■■ ===> Real 
urlPath = "01_ast_vrfc/"   # 01. URL 경로(엑셀 폴더 경로)  # ■■■■■■■ ===> TEST 수행(테스트) @@@ ===>    


[@_T] ■■■ [/ast_vrfc.py] ==> [T_71_15] [90. 총 합계(90.A - 90.B)]


=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■



- 00. 실행_파일 만들기 사용법 @@@
01. /ast_vrfc.py 파일 실행(Visual Studio Code에서 수행)
TAMA_HAart_404@TAMA-HAart-404 MINGW64 /d/PythonWorkspace (main)
$ cd /D/PythonWorkspace/77_실행_파일_만들기

TAMA_HAart_404@TAMA-HAart-404 MINGW64  cd /D/PythonWorkspace/77_실행_파일_만들기
$ dir -l
-rw-r--r-- 1 TAMA_HAart_404 197121 223927 Jul 15 16:51 ast_vrfc.py   	--->   ast_vrfc.py  파일 존재 여부 확인 ■

TAMA_HAart_404@TAMA-HAart-404 MINGW64 /D/PythonWorkspace/77_실행_파일_만들기 (main)
$ pyinstaller -w -F ast_vrfc.py		 --->  	// ■■■ (w: 콘솔 윈도우 표시 안함, F: 1개의 exe파일로 변환)
1098 INFO: PyInstaller: 5.13.2
1098 INFO: Python: 3.11.4
1113 INFO: Platform: Windows-10-10.0.22631-SP0
.........
.........
.........

51212 INFO: Fixing EXE headers
52167 INFO: Building EXE from EXE-00.toc completed successfully.   ---> 성공 여부 여부 확인 ■
 
TAMA_HAart_404@TAMA-HAart-404 MINGW64 /D/PythonWorkspace/77_실행_파일_만들기 (main)
$ cd /D/PythonWorkspace/77_실행_파일_만들기/dist

TAMA_HAart_404@TAMA-HAart-404 MINGW64 /D/PythonWorkspace/77_실행_파일_만들기/dist (main)
$ dir -l
total 70829 
-rwxr-xr-x 1 TAMA_HAart_404 197121 72356805 Jul 15 17:03 ast_vrfc.exe       -->  \dist\ast_vrfc.exe  파일 생성 여부 확인 ■■■

02. D:\PythonWorkspace\77_실행_파일_만들기\dist 폴더에 01_1. paramYM.txt, 02. 자산 검증(24.03).xlsx 파일 복사(탐색기에서)
 1) 01_1. paramYM.txt, 02. 자산 검증(24.03).xlsx  	==> D:\PythonWorkspace\77_실행_파일_만들기\dist

03. /ast_vrfc.exe 실행 파일 더블 클릭(탐색기에서)
 1) 02. 자산 검증(24.04)_RSLT.xlsx 파일 생성됨 ■■■
=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


 
- /ast_vrfc.py 파일 로그 @@@
print("\n\n [@_T] ■■■ [/ast_vrfc.py] ==> [T_01] ■■■■■■ [######################### [자산 검증 파일 TEST Start] 
print("[@_T] ■■■ [/ast_vrfc.py] ==> [T_01_01]" )

openFileNm = "02. 자산 검증("+ str(input_astYY) +"."+ format(input_astMM, '02') +").xlsx"   # 오픈 파일 명(02. 자산 검증(23.08).xlsx) 
print("[@_T] ■■■ [/ast_vrfc.py] ==> [T_02_04] [오픈 파일]"+ str(openFileNm) +"[wb]"+ str(wb) )
# ---------------------------------------------------------------------------------------------------------------------->
# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ ------------------->


print("\n\n [@_T] ■■■ [/ast_vrfc.py] ==> [T_01] ■■■■■■ [######################### [11. 계좌별잔고 Tab(기준 정보) 작업 Start] 
#########################] ■■■■■■ ")

ws_01_actBalnc = wb["계좌별잔고"]   # "계좌별잔고" Sheet(Tab)에 접근 @@@@@@@@ ===========>
print("[@_T] ■■■ [/ast_vrfc.py] ==> [T_11_0] [계좌별잔고 Tab Sheet(Tab)에 접근 @@@@@@@@ ===========>]")
# ---------------------------------------------------------------------------------------------------------------------->
# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ ------------------->


print("\n\n [@_T] ■■■ [/ast_vrfc.py] ==> [T_01] ■■■■■■ [######################### [21. 퇴직신탁 Tab(기준 정보) 작업 Start]
 #########################] ■■■■■■ ")
 
ws_02_irp = wb["퇴직신탁"]   # "퇴직신탁" Sheet(Tab)에 접근 @@@@@@@@ ===========>
print("[@_T] ■■■ [/ast_vrfc.py] ==> [T_21_01] [퇴직신탁 Tab Sheet(Tab)에 접근 @@@@@@@@ ===========>]")
# ---------------------------------------------------------------------------------------------------------------------->
# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ ------------------->


print("\n\n [@_T] ■■■ [/ast_vrfc.py] ==> [T_01] ■■■■■■ [######################### [51. 총자산(24Y) Tab 작업 Start] 
#########################] ■■■■■■ ")
 
totAstYear = "00. 총자산("+ str(astYYM[2:4]) +"Y)"
wsTot = wb[totAstYear]    # "00. 총자산(24Y)" Sheet(Tab)에 접근 @@@@@@@@ ===========> 
print("[@_T] ■■■ [/ast_vrfc.py] ==> [T_51_01] [자산(202*) Sheet(Tab)에 접근 @@@@@@@@ ===========>]")
# ---------------------------------------------------------------------------------------------------------------------->
# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ ------------------->


print("\n\n [@_T] ■■■ [/ast_vrfc.py] ==> [T_01] ■■■■■■ [######################### [71. 자산(24Y) Tab 작업 Start] 
#########################] ■■■■■■ ")

astYear = "자산("+ str(astYYM[2:4]) +"Y)" 
ws = wb[astYear]    # "자산(2023)" Sheet(Tab)에 접근 @@@@@@@@ ===========>   
print("[@_T] ■■■ [/ast_vrfc.py] ==> [T_71_01] [71. 자산(24Y) Tab Sheet(Tab)에 접근 @@@@@@@@ ===========>]") 
# ---------------------------------------------------------------------------------------------------------------------->
# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ -------------------> 
=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■





#  python /D/PythonWorkspace/rpa_basic/1_excel/4_open_file.py

#  python /D/PythonWorkspace/rpa_basic/1_excel/1_create_file.py
 


# python Workspace 처리 파일 실행(Git bash에서 처리) ■■■■■■   ■■■■■■    ■■■■■■   ■■■■■■   ■■■■■■ 
#  python /D/PythonWorkspace/python_ws_pu.py

#  python /D/PythonWorkspace/python_ws_pu.py get

=============================================================================================================

 # OB SQL 파일 복사 쳐리 파일 실행(Git bash에서 처리) ■■■■■■ 
#  python /D/PythonWorkspace/52_OB_work_local/ob_sql_fm_copy.py
 
=============================================================================================================

# OB 엑셀 파일 복사 파일 실행(Git bash에서 처리) ■■■■■■ 
#  python /D/PythonWorkspace/52_OB_work_local/ob_excel_fm_copy.py

=============================================================================================================


# OB 엑실 파일 내용 수정 파일 실행(Git bash에서 처리) ■■■■■■ 
#  python /D/PythonWorkspace/52_OB_work_local/ob_excel_fm_conts_edit.py
 
=============================================================================================================

 
# 0B CSV 파일 정보 확인  파일 실행(Unix에서)  ■■■■■■   ■■■■■■   ■■■■■■  ■■■■■■   ■■■■■■   ■■■■■■  
#  python /D/PythonWorkspace/51_Unix/csv_info_tama.py


#  ----------------------------------------------------------------------------------------


# CSV 파일 정보 조회 삭제 처리 파일 실행(Unix에서, Git bash에서 처리)  ■■■■■■   ■■■■■■   ■■■■■■  ■■■■■■   ■■■■■■   ■■■■■■  
#  python /D/PythonWorkspace/51_Unix/csv_info_tama_RD.py


#  python /D/PythonWorkspace/51_Unix/csv_info_tama_RD.py D

 
=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


- 원격저장소 추가 - git remote add
https://shanepark.tistory.com/284
---------------------------------------------------------------------------------------------------------------------------

- Repository 생성
PythonWorkspace ==> D:\PythonWorkspace

- 02. Git repository 만들기
https://ojui.tistory.com/16

- git remote add origin 카피한 주소 : 원격 저장소와 연결
- git remote -v : 연결된 원격 저장소 확인

- git pull origin master : 원격저장소의 master 브랜치를 pull하여 로컬의 master브랜치와 연결
- git add . : 모든 파일을 스테이지에 올림
- git commit -m "커밋메세지" : 스테이지에 올린 파일들을 커밋
- git push origin master : 원격저장소의 master 브랜치에 push
---------------------------------------------------------------------------------------------------------------------------

 - 원격 저장소 추가
git remote add origin [추가할 원격 git 저장소 주소]
# 아래의 두 예시는 각각 https 와 ssh 입니다.
git remote add origin https://github.com/Shane-Park/playddit.git
git remote add origin git@github.com:Shane-Park/playddit.git
-------------------------------------------------------------------------------------------------

- 원격 저장소 추가
git add .
git commit -m "커밋메시지"
git push origin master
---------------------------------------------------------------------------------------------------------------------------

- 원격저장소 목록 조회
tamar@TAMA-INO-PC MINGW64 /d/PythonWorkspace (main)
$ git remote -v
origin  https://github.com/JINTAEMAN/01_TAMA_Work.git (fetch)
origin  https://github.com/JINTAEMAN/01_TAMA_Work.git (push) 
-------------------------------------------------------------------------------------------------

- 기존 원격저장소를 삭제하고 새로 추가
git remote remove origin;
git remote add origin https://github.com/JINTAEMAN/PythonWorkspace.git


git log --oneline --all --graph 

- git pull origin main 		: 원격저장소의 master 브랜치를 pull하여 로컬의 master브랜치와 연결
- git add . : 모든 파일을 스테이지에 올림
- git commit -m "Add to Python Work space[22. 07.19(T_01), by 진태만]";     # 스테이지에 올린 파일들을 커밋
- git push origin master : 원격저장소의 master 브랜치에 push
 
- git pull origin main

git add -A;
git commit -m "Add to Python Work space[22.07.19(T_05), by 진태만]";
git push origin main  # origin으로 이름지어진 저장소에 현재 master Branch를 push

=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
 
git status		# 0. Git 저장소 상태 확인
git pull  origin  main     # 원격 저장소 데이타 가져 오기(main: 브랜치)

git log --oneline --all --graph   # 로그 확인

--------------------------------------------------------------------------------------

git add -A;
git commit -m "Add to Python Work space[22.07.20(T_07), by 진태만];";
git push origin main ;

=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

 
- Memo(2023.07).sql 수정
cp  /D/'01. TAMA_DATA'/'01. TAMA Work'/'01. Memo'/'Memo(2023.07).sql'  /D/PythonWorkspace/'01. Memo'

git add -A;
git commit -m "Add to Memo(2023.07).sql 수정[22.07.18(T_01_2), by 진태만]"; 
git push origin main
-----------------------------------------------------------------------------------------------


- 변경된 파일 복사 해오기
cp   /D/PythonWorkspace/'01. Memo'/'Memo(2023.07).sql'   /D/'01. TAMA_DATA'/'01. TAMA Work'/'01. Memo'

=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
+--------------------------------------------------------// End //--------------------------------------------------+ 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  
 

- Git 원격 저장소에 push 하는 과정(git pull, add, commit, psuh)
- Git 원격 저장소에 push 하는 과정
https://ikcoo.tistory.com/44

1. 원격 저장소 init or clone
$ git clone https://github.com/JINTAEMAN/PythonWorkspace.git
2. Git 서명 작성
$ git config --global user.name "tamario";
git config --global user.email "tamario@naver.com"
3. Git 스테이지 영역에 추가
> git add -A;	# 3. Git 스테이지 영역에 추가
4. Git 로컬 저장소 영역에 추가
> git commit -m "Add to Python Work space[22. 07.19(T_02), by 진태만];";	 # 4. Git 로컬 저장소 영역에 추가, 코멘트 작성
5. 원격 저장소에 반영
> git remote add origin https://github.com/JINTAEMAN/PythonWorkspace.git	# 5. 원격 저장소에 반영(최초 작성시)
> git push origin main     # 5. 원격 저장소에 반영(main: 브랜치)
--------------------------------------------------------------------------------------------------------------

git status		# 0. Git 저장소 상태 확인
git pull  origin  main     # 원격 저장소 데이타 가져 오기(main: 브랜치)
--------------------------------------------------------------------------------------------------------------

def movefileAndPush():
    try:
        x = subprocess.run(['cp','Project_Repo_Details.csv','bitbucket_repo_report/Project_Repo_Details.csv'])
        print(x.stdout)
        print(x.stderr)

        os.chdir("/dirs/Repo-report_scripts/bitbucket_repo_report")
        subprocess.run(['git','config','--global','user.email','test@gmail.com'])
        subprocess.run(['git','add','Project_Repo_Details.csv'])
        subprocess.run(['git','commit','-m','PQR-99 adding repo report'])
        subprocess.run(['git','push','null','--all'])

    except Exception as e:
        print("Error occured :".format(e))
if __name__ == '__main__':
   movefileAndPush()

===========================================================================================================

- git 원격저장소 추가 - git remote add
https://shanepark.tistory.com/284
---------------------------------------------------------------------------------------------------------------------------

- Repository 생성
PythonWorkspace ==> D:\PythonWorkspace

- 02. Git repository 만들기
https://ojui.tistory.com/16

- git remote add origin 카피한 주소 : 원격 저장소와 연결
- git remote -v : 연결된 원격 저장소 확인

- git pull origin master : 원격저장소의 master 브랜치를 pull하여 로컬의 master브랜치와 연결
- git add . : 모든 파일을 스테이지에 올림
- git commit -m "커밋메세지" : 스테이지에 올린 파일들을 커밋
- git push origin master : 원격저장소의 master 브랜치에 push
---------------------------------------------------------------------------------------------------------------------------

- 원격 저장소 추가
git remote add origin [추가할 원격 git 저장소 주소]
# 아래의 두 예시는 각각 https 와 ssh 입니다.
git remote add origin https://github.com/Shane-Park/playddit.git
git remote add origin git@github.com:Shane-Park/playddit.git
-------------------------------------------------------------------------------------------------

- 원격 저장소 추가
git add .
git commit -m "커밋메시지"
git push origin master
---------------------------------------------------------------------------------------------------------------------------

- 원격저장소 목록 조회
tamar@TAMA-INO-PC MINGW64 /d/PythonWorkspace (main)
$ git remote -v
origin https://github.com/JINTAEMAN/01_TAMA_Work.git (fetch)
origin https://github.com/JINTAEMAN/01_TAMA_Work.git (push)
-------------------------------------------------------------------------------------------------

- 기존 원격저장소를 삭제하고 새로 추가
git remote remove origin;
git remote add origin https://github.com/JINTAEMAN/PythonWorkspace.git


- git pull origin main 		: 원격저장소의 master 브랜치를 pull하여 로컬의 master브랜치와 연결
- git add . : 모든 파일을 스테이지에 올림
- git commit -m "Add to Python Work space[22. 07.19(T_01)], by 진태만];" 		: 스테이지에 올린 파일들을 커밋
- git push origin master : 원격저장소의 master 브랜치에 push
- git pull origin main;
git add -A;
git commit -m "Add to Python Work space[22. 07.19(T_01)], by 진태만];";
git push
=========================================================================================================== 
=============================================================================================================
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

- GIT2 - SourceTree 버전관리편[생활 코딩]
https://www.youtube.com/watch?v=VeQDmXjbHtQ&list=PLuHgQVnccGMCejd1l8C8oyZSYQDtkMRAg&index=1

- IT2 - SourceTree 버전관리 - 5. 하나의 버전, 여러개의 파일[생활 코딩] ==> 소스 트리
https://www.youtube.com/watch?v=GVODc41QZWw&list=PLuHgQVnccGMCejd1l8C8oyZSYQDtkMRAg&index=6
===============================================================================================================

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
+--------------------------------------------------------// End //--------------------------------------------------+ 
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■  
 